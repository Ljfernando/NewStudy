VizCombos$Temporal == num_temporal &
VizCombos$NumVars == ncol(Vars.df))
return(as.character(VizCombos$Visualization[viz_indeces]))
}
# ~~~~~~~~~~~~~~ Ranking Variables ~~~~~~~~~~~~~~
#TODO
# Create function(s) that run statistical test on single variables
# and combinations of variables to determine which are 'interesting'
RunStats <- function(df){
types <- sapply(df, class)
varStats <- list()
for(i in seq_along(types)){
if(types[i] == "numeric" | types[i] == "integer"){
varStats[[i]] <- SingleQuantitativeStats(df[,i])
}
else if(types[i] == "factor"){
varStats[[i]] <- SingleCategoricalStats(df[,i])
}
}
return (varStats)
}
SingleQuantitativeStats <- function(Var){
if((unique(Var) %>% length()) == length(Var)){ # Returns -1 if it's an ID variable
return (list(entropy = -1))
}
p <- ks.test(unique(Var), "pnorm")$p.value
if(class(Var) == "numeric")
e <- discretize(Var) %>% entropy()
else
e <- entropy(Var)
c <- sd(Var) / mean(Var)
i <- IQR(Var) / median(Var)
return (list(kolmogorov_smirnov = p,
entropy = e,
CoV = c,
IQR_med = i))
}
SingleCategoricalStats <- function(Var){
if((levels(Var) %>% length()) == 1){ # Returns entropy -1 if only one level
return(list(entropy = -1))
}
if((levels(Var) %>% length()) == 2)
p = table(Var) %>% binom.test()
else
p = table(Var) %>% chisq.test()
e = entropy(Var)
return(list(goodnessOfFit = p$p.value,
entropy = e))
}
TwoQuantitativeStats <- function(Var1, Var2){
if((unique(Var1) %>% length()) == length(Var1) |
(unique(Var2) %>% length()) == length(Var2)){ # Returns entropy -1 if either var is an ID variable
return (list(entropy = -1))
}
corr <- cor(Var1, Var2)
fit <- lm(Var1~Var2) %>% summary()
mutInfo <- mutinformation(discretize(Var1), discretize(Var2))
condEnt <- c(condentropy(discretize(Var1), discretize(Var2)),
condentropy(discretize(Var1), discretize(Var2))) %>% min()
return(list(correlation = corr,
SLR = fit,
mutualInfo = mutInfo,
conditionalEnt = condEnt))
}
TwoCategoricalStats <- function(Var1, Var2){
if((levels(Var1) %>% length()) == 1 | (levels(Var12) %>% length()) == 1){
return(list(entropy = -1))
}
chisq <- table(Var1, Var2) %>% chisq.test()
condEnt <- c(condentropy(Var1,Var2),
condentropy(Var1, Var2)) %>% min()
mutInfo <- mutinformation(Var1, Var2)
# Add logistic regression, multinomial regression
return(list(independence = chisq,
conditionalEnt = condEnt,
mutualInfo = mutInfo))
}
# Ranks quantitative and categorical variables separately
# by their magnitude of entropy
RankByEntropy <- function(df){
stats <- RunStats(df) # Grabbing list of stats for each variable
entropy_val <- sapply(stats, function(var){
return (var$entropy)
})
types <- sapply(df, class)
names(entropy_val) <- names(df)
#Grabbing all quantitative variables and ordering them in descending order
quant_types <- which(types == "integer" | types == "numeric")
quant_types <- quant_types[order(entropy_val[quant_types], decreasing = TRUE)]
#Grabbing all categorical variables and ordering them in descending order
cat_types <- which(types == "factor")
cat_types <- cat_types[order(entropy_val[cat_types], decreasing = TRUE)]
print(quant_types)
print(cat_types)
}
VizCombos <- read.csv("../ServerCode/VisualizationMatrix/VisualizationDataCombinations.csv")
df <- readDataset("../Datasets/cps1.csv", 10)
ChooseVisualization(data.frame(df$re74,
df$re75,
df$black,
df$marr),
VizCombos)
RankByEntropy(df)
GetPossibleVisualizations <- function(df, vizCombos){
combos <- list(two_var = combn(names(df), 2) %>% t() %>% data.frame(),
three_var = combn(names(df), 3) %>% t() %>% data.frame(),
four_var = combn(names(df), 4) %>% t() %>% data.frame())
return (combos)
}
combos <- GetPossibleVisualizations(df, vizCombos)
# four_var <- combn(top_five, 4)
# three_var <- combn(top_five, 3)
# two_var <- combn(top_five, 2)
# one_var <- combn(top_five, 1)
for(i in 1: nrow(combos$two_var)){
vars <- unlist(combos[["two_var"]][i,])
print(i)
print(vars)
# combos[["two_var"]]$VizOptions[i] <- ChooseVisualization(df[, vars], VizCombos)
}
# ChooseVisualization(df[,two_var[,3]], VizCombos)
View(VizCombos)
viz <- VizCombos$Visualization
viz <- VizCombos$Visualization %>% levels()
viz
for(i in viz){
print(i)
}
for(i in viz){
cat(i)
}
for(i in viz){
cat(i, "\n")
}
for(i in viz){
cat('"',i, '"\n')
}
for(i in viz){
cat('"',i, '"\n', sep ="")
}
for(i in viz){
cat('"',i, '" =\n', sep ="")
}
for(i in viz){
cat('"',i, '" = ,\n', sep ="")
}
GenerateChart <- function(Vars, VizType){
switch(VizType,
# "100% Stacked Area Chart" = ,
# "100% Stacked Bar Chart" = ,
# "100% Stacked Column Chart" = ,
# "Area Chart" = ,
# "Aster Plot" = ,
# "Bar Chart" = ,
# "Box Plot" = ,
# "Bubble Plot" = ,
# "Bullet Chart" = ,
# "Candle Stick Chart" = ,
# "Circular Bar Chart" = ,
# "Clustered Bar Chart" = ,
# "Clustered Column Chart" = ,
# "Column Chart" = ,
# "Density Plot" = ,
# "Donut Chart" = ,
# "Dual Axis Line" = ,
# "Gantt Chart" = ,
# "Gauge" = ,
# "Heatmap" = ,
# "Histogram" = ,
"Line Chart" = ,
# "Multi-Series Line Chart" = ,
# "Parallel Coordinates" = ,
# "Pie Chart" = ,
# "Radar Chart" = ,
# "Scatter Plot" = ,
# "Scatter Plot Matrix" = ,
# "Stacked Area Chart" = ,
# "Stacked Bar Chart" = ,
# "Stacked Column Chart" = ,
# "Stream Graph" = ,
# "Violin Chart" = ,
# "Waterfall Chart" = ,
}
GenerateChart <- function(Vars, VizType){
switch(VizType,
# "100% Stacked Area Chart" = ,
# "100% Stacked Bar Chart" = ,
# "100% Stacked Column Chart" = ,
# "Area Chart" = ,
# "Aster Plot" = ,
# "Bar Chart" = ,
# "Box Plot" = ,
# "Bubble Plot" = ,
# "Bullet Chart" = ,
# "Candle Stick Chart" = ,
# "Circular Bar Chart" = ,
# "Clustered Bar Chart" = ,
# "Clustered Column Chart" = ,
# "Column Chart" = ,
# "Density Plot" = ,
# "Donut Chart" = ,
# "Dual Axis Line" = ,
# "Gantt Chart" = ,
# "Gauge" = ,
# "Heatmap" = ,
# "Histogram" = ,
"Line Chart" = ,
# "Multi-Series Line Chart" = ,
# "Parallel Coordinates" = ,
# "Pie Chart" = ,
# "Radar Chart" = ,
# "Scatter Plot" = ,
# "Scatter Plot Matrix" = ,
# "Stacked Area Chart" = ,
# "Stacked Bar Chart" = ,
# "Stacked Column Chart" = ,
# "Stream Graph" = ,
# "Violin Chart" = ,
# "Waterfall Chart" = ,
)
}
library(ggplot2)
?geom_jitter
GenerateScatterPlot <- function(df){
myplot <- ggplot(data = df)
if(ncol(df) == 2){
if((df$y %>% class) == "Factor")
myplot +
geom_point(x = x, y = y,
position = "jitter") +
labels(title = paste(names(df$y), " Against", names(df$x)))
else
myplot +
geom_point(x = x, y = y)+
labels(title = paste(names(df$y), " Against", names(df$x)))
}
}
GenerateScatterPlot(df[, "age", "educ"])
GenerateScatterPlot(df[, c("age", "educ")])
GenerateScatterPlot <- function(df){
myplot <- ggplot(data = df)
if(ncol(df) == 2){
names(df) = c("x", y)
if((df$x %>% class) == "Factor")
myplot +
geom_point(x = x, y = y,
position = "jitter") +
labels(title = paste(names(df$y), " Against", names(df$x)))
else
myplot +
geom_point(x = x, y = y)+
labels(title = paste(names(df$y), " Against", names(df$x)))
}
}
GenerateScatterPlot(df[, c(x = "age", "educ")])
GenerateScatterPlot <- function(df){
myplot <- ggplot(data = df)
if(ncol(df) == 2){
names(df) = c("x", "y")
if((df$x %>% class) == "Factor")
myplot +
geom_point(x = x, y = y,
position = "jitter") +
labels(title = paste(names(df$y), " Against", names(df$x)))
else
myplot +
geom_point(x = x, y = y)+
labels(title = paste(names(df$y), " Against", names(df$x)))
}
}
GenerateScatterPlot(df[, c(x = "age", "educ")])
GenerateScatterPlot <- function(df){
if(ncol(df) == 2){
names(df) = c("x", "y")
myplot <- ggplot(data = df)
if((df$x %>% class) == "Factor")
myplot +
geom_point(x = x, y = y,
position = "jitter") +
labels(title = paste(names(df$y), " Against", names(df$x)))
else
myplot +
geom_point(x = x, y = y)+
labels(title = paste(names(df$y), " Against", names(df$x)))
}
}
GenerateScatterPlot(df[, c(x = "age", "educ")])
GenerateScatterPlot <- function(df){
if(ncol(df) == 2){
names(df) = c("x", "y")
myplot <- ggplot(data = df)
if((df$x %>% class) == "Factor"){
myplot +
geom_point(x = x, y = y,
position = "jitter") +
labels(title = paste(names(df$y), " Against", names(df$x)))
}
else{
myplot +
geom_point(x = x, y = y)+
labels(title = paste(names(df$y), " Against", names(df$x)))
}
}
}
GenerateScatterPlot(df[, c(x = "age", "educ")])
GenerateScatterPlot <- function(df){
if(ncol(df) == 2){
names(df) = c("x", "y")
myplot <- ggplot(data = df)
print(names(df))
if((df$x %>% class) == "Factor"){
myplot +
geom_point(x = x, y = y,
position = "jitter") +
labels(title = paste(names(df$y), " Against", names(df$x)))
}
else{
myplot +
geom_point(x = x, y = y)+
labels(title = paste(names(df$y), " Against", names(df$x)))
}
}
}
GenerateScatterPlot(df[, c(x = "age", "educ")])
GenerateScatterPlot <- function(df){
if(ncol(df) == 2){
names(df) = c("x", "y")
myplot <- ggplot(data = df)
View(df$x)
if((df$x %>% class) == "Factor"){
myplot +
geom_point(x = x, y = y,
position = "jitter") +
labels(title = paste(names(df$y), " Against", names(df$x)))
}
else{
myplot +
geom_point(x = x, y = y)+
labels(title = paste(names(df$y), " Against", names(df$x)))
}
}
}
GenerateScatterPlot(df[, c(x = "age", "educ")])
View(df$X)
View(df$age)
1- (0.9^3)
1.36 * (0.9^3)
1 - (5/6)^10
1 - 10.2 + 0.32188757 + 0.2590 + 0.13896 + 0 .0559
1 - 10.2 + 0.32188757 + 0.2590 + 0.13896 + 0.0559
1 - 1.2 + 0.32188757 + 0.2590 + 0.13896 + 0.0559
ln(5)
log(5)
nlog(5)
?log
log2(5)
1 - (choose(42,5)/choose(50,5)) - (choose(8,1)*choose(42,4)/choose(50,5))
log(5)
log(0.2)
(3*4*7*9^6)/10^10
(2.9^4)/10^6
5^9
choose(9,2)*(0.1^3)*(0.9^7)
exp
?exp
1 - 4*(exp(-3))
exp()
exp(1)
exp(1)^-3
1 - 4*(exp(1)^-3)
(17/2)*exp(-3)*(1 -13*exp(-3))
4*exp(-3)
?pois
?rpois
dpois(x = 2, lambda = 3)
qpois(x = 2, lambda = 3)
qpois(p = 2, lambda = 3)
1 - dpois(p = 2, lambda = 3)
0.224*0.4232
0.3528*0.4232
1 - (choose(42/5)/ choose(50,5)) - (choose(8,1) * choose(42,4)/ choose(50,5))
1 - (choose(42,5)/ choose(50,5)) - (choose(8,1) * choose(42,4)/ choose(50,5)))
1 - (choose(42,5)/ choose(50,5)) - (choose(8,1) * choose(42,4)/ choose(50,5))
choose(7,2) *((9/10)^2) * ((1/10)^3)
choose(5,2) *((9/10)^2) * ((1/10)^3)
choose(5,2) *((9/10)^2) * ((1/10)^3) * (9/10)
1 - (0.9^3)
1 - 0.06197
0.93803 * 0.35281
1 - (13*exp(-3))
17*exp(-3)/2
1 - (choose(3,2) * choose(8,2)/choose(10,4))
choose(3,2) * (.9^3) * (.1^3)
1 - (0.9^3)
1 - choose(3,2) * (.9^3) * (.1^3)
0.9^3
1 - (5/6)^10
(exp(-3) * 3^2)/2
((exp(-3) * 3^2)/2) + ((exp(-3)*3^4)/factorial(4))
1 - 0.00729
1.36 * 0.9^3
func <- function(x){
return((1/6)*((5/6)^x))
}
for(i in 0:9){
sum = sum + func(i)
}
sum = 0
for(i in 0:9){
sum = sum + func(i)
}
sum
1 - (5/6)^10
choose(4,3) * (0.9^2)*(0.1^2)
func <- function(x){
return(choose(6,x)*(0.1^x)*(0.9^(6-2)))
}
sum = 0
for(i in 0:3){
sum = sum + func(i)
}
sum
sum = 0
for(i in 0:3){
sum = sum + func(i)
print(sum)
}
func <- function(x){
return(choose(6,x)*(0.1^x)*(0.9^(6-x)))
}
sum = 0
for(i in 0:3){
sum = sum + func(i)
print(sum)
}
(0.9^3) * 1.36
func <- function(x){
return(choose(6,x)*(0.1^x)*(0.9^(6-x)))
}
for(i in 0:2){
sum = sum + func(i)
print(sum)
}
func <- function(x){
return(choose(6,x)*(0.1^x)*(0.9^(6-x)))
}
sum = 0
for(i in 0:2){
sum = sum + func(i)
print(sum)
}
1 - (0.9^3)
(0.6472)*(0.4232)
(1 - 0.6472)*(0.4232)
getwd()
setwd("~/Desktop/Research/VGLResearch/DefaultAesthetics/Data/GeneratedPlotData/BunchOfScatterplots")
df <- read.csv("small/1.csv")
plot(df$x, df$y, col = df$class)
?png
filname = paste("small/1.csv")
df <- read.csv("small/1.csv")
filename = paste("small/1.csv")
filename = paste("small/1")
png(filename = filename)
plot(df$x, df$y, col = df$class)
dev.off()
for(i in 1:50){
filename = paste("small/", i, sep = "")
file_ext = ".csv"
df <- read.csv(paste(filename, file_ext, sep = ""))
png(filename = paste(filename, ".png", sep = "")
plot(x = df$x, y = df$y, col = df$class)
dev.off()
}
file_ext = ".csv"
df <- read.csv("small/1.csv")
png(filename = filename)
plot(df$x, df$y, col = df$class)
dev.off()
for(i in 1:50){
filename = paste("small/", i, sep = "")
file_ext = ".csv"
df <- read.csv(paste(filename, file_ext, sep = ""))
png(filename = paste(filename, ".png", sep = ""))
plot(x = df$x, y = df$y, col = df$class)
dev.off()
}
for(i in 1:50){
filename = paste("large/", i, sep = "")
file_ext = ".csv"
df <- read.csv(paste(filename, file_ext, sep = ""))
png(filename = paste(filename, ".png", sep = ""))
plot(x = df$x, y = df$y, col = df$class)
dev.off()
}
df <- read.csv("large/1.csv")
df <- read.csv("../NewData/easy_large_1.csv")
df <- read.csv("../../../NewStudy/NewStudy/public/data/clusters/easy_large_1.csv")
setwd("~/Desktop/Research/VGLResearch/DefaultAesthetics/NewStudy/NewStudy/public/data/clusters")
df <- read.csv("easy_large_1.csv")
ggplot(data = df) +
geom_point(mapping = aes(x = df$x, y = df$y, col = df$class))
df <- read.csv("easy_large_2.csv")
df <- read.csv("easy_large_2.csv")
ggplot(data = df) +
geom_point(mapping = aes(x = df$x, y = df$y, col = df$class))
df <- read.csv("easy_large_1.csv")
ggplot(data = df) +
geom_point(mapping = aes(x = df$x, y = df$y, col = df$class))
df <- read.csv("hard_large_5.csv")
ggplot(data = df) +
geom_point(mapping = aes(x = df$x, y = df$y, col = df$class))
