var j2c    = require('json2csv')
  , fs     = require('fs')
  , file   = process.argv[2]
  , _      = require('underscore')
  , fields = [ // EDIT THESE
      'postId',
      'timestamp',
      "pre1A_avgDist",
      "pre1A_diff",
      "pre1A_intercept",
      "pre1A_slope",
      "pre1B_avgDist",
      "pre1B_diff",
      "pre1B_intercept",
      "pre1B_slope",
      "pre1C_avgDist",
      "pre1C_diff",
      "pre1C_intercept",
      "pre1C_slope",
      "pre1D_avgDist",
      "pre1D_diff",
      "pre1D_intercept",
      "pre1D_slope",
      "pre2A_avgDist",
      "pre2A_diff",
      "pre2A_intercept",
      "pre2A_slope",
      "pre2B_avgDist",
      "pre2B_diff",
      "pre2B_intercept",
      "pre2B_slope",
      "pre2C_avgDist",
      "pre2C_diff",
      "pre2C_intercept",
      "pre2C_slope",
      "pre2D_avgDist",
      "pre2D_diff",
      "pre2D_intercept",
      "pre2D_slope",
      "pre3A_avgDist",
      "pre3A_diff",
      "pre3A_intercept",
      "pre3A_slope",
      "pre3B_avgDist",
      "pre3B_diff",
      "pre3B_intercept",
      "pre3B_slope",
      "pre3C_avgDist",
      "pre3C_diff",
      "pre3C_intercept",
      "pre3C_slope",
      "pre3D_avgDist",
      "pre3D_diff",
      "pre3D_intercept",
      "pre3D_slope",
      "pre4A_avgDist",
      "pre4A_diff",
      "pre4A_intercept",
      "pre4A_slope",
      "pre4B_avgDist",
      "pre4B_diff",
      "pre4B_intercept",
      "pre4B_slope",
      "pre4C_avgDist",
      "pre4C_diff",
      "pre4C_intercept",
      "pre4C_slope",
      "pre4D_avgDist",
      "pre4D_diff",
      "pre4D_intercept",
      "pre4D_slope",
      "pre5A_avgDist",
      "pre5A_diff",
      "pre5A_intercept",
      "pre5A_slope",
      "pre5B_avgDist",
      "pre5B_diff",
      "pre5B_intercept",
      "pre5B_slope",
      "pre5C_avgDist",
      "pre5C_diff",
      "pre5C_intercept",
      "pre5C_slope",
      "pre5D_avgDist",
      "pre5D_diff",
      "pre5D_intercept",
      "pre5D_slope",
      "pre6A_avgDist",
      "pre6A_diff",
      "pre6A_intercept",
      "pre6A_slope",
      "pre6B_avgDist",
      "pre6B_diff",
      "pre6B_intercept",
      "pre6B_slope",
      "pre6C_avgDist",
      "pre6C_diff",
      "pre6C_intercept",
      "pre6C_slope",
      "pre6D_avgDist",
      "pre6D_diff",
      "pre6D_intercept",
      "pre6D_slope",
      "pre7A_avgDist",
      "pre7A_diff",
      "pre7A_intercept",
      "pre7A_slope",
      "pre7B_avgDist",
      "pre7B_diff",
      "pre7B_intercept",
      "pre7B_slope",
      "pre7C_avgDist",
      "pre7C_diff",
      "pre7C_intercept",
      "pre7C_slope",
      "pre7D_avgDist",
      "pre7D_diff",
      "pre7D_intercept",
      "pre7D_slope",
      "pre8A_avgDist",
      "pre8A_diff",
      "pre8A_intercept",
      "pre8A_slope",
      "pre8B_avgDist",
      "pre8B_diff",
      "pre8B_intercept",
      "pre8B_slope",
      "pre8C_avgDist",
      "pre8C_diff",
      "pre8C_intercept",
      "pre8C_slope",
      "pre8D_avgDist",
      "pre8D_diff",
      "pre8D_intercept",
      "pre8D_slope",
      "pre9A_avgDist",
      "pre9A_diff",
      "pre9A_intercept",
      "pre9A_slope",
      "pre9B_avgDist",
      "pre9B_diff",
      "pre9B_intercept",
      "pre9B_slope",
      "pre9C_avgDist",
      "pre9C_diff",
      "pre9C_intercept",
      "pre9C_slope",
      "pre9D_avgDist",
      "pre9D_diff",
      "pre9D_intercept",
      "pre9D_slope",
      "pre10A_avgDist",
      "pre10A_diff",
      "pre10A_intercept",
      "pre10A_slope",
      "pre10B_avgDist",
      "pre10B_diff",
      "pre10B_intercept",
      "pre10B_slope",
      "pre10C_avgDist",
      "pre10C_diff",
      "pre10C_intercept",
      "pre10C_slope",
      "pre10D_avgDist",
      "pre10D_diff",
      "pre10D_intercept",
      "pre10D_slope",
      "pre11A_avgDist",
      "pre11A_diff",
      "pre11A_intercept",
      "pre11A_slope",
      "pre11B_avgDist",
      "pre11B_diff",
      "pre11B_intercept",
      "pre11B_slope",
      "pre11C_avgDist",
      "pre11C_diff",
      "pre11C_intercept",
      "pre11C_slope",
      "pre11D_avgDist",
      "pre11D_diff",
      "pre11D_intercept",
      "pre11D_slope",
      "pre12A_avgDist",
      "pre12A_diff",
      "pre12A_intercept",
      "pre12A_slope",
      "pre12B_avgDist",
      "pre12B_diff",
      "pre12B_intercept",
      "pre12B_slope",
      "pre12C_avgDist",
      "pre12C_diff",
      "pre12C_intercept",
      "pre12C_slope",
      "pre12D_avgDist",
      "pre12D_diff",
      "pre12D_intercept",
      "pre12D_slope",
      "pre13A_avgDist",
      "pre13A_diff",
      "pre13A_intercept",
      "pre13A_slope",
      "pre13B_avgDist",
      "pre13B_diff",
      "pre13B_intercept",
      "pre13B_slope",
      "pre13C_avgDist",
      "pre13C_diff",
      "pre13C_intercept",
      "pre13C_slope",
      "pre13D_avgDist",
      "pre13D_diff",
      "pre13D_intercept",
      "pre13D_slope",
      "pre14A_avgDist",
      "pre14A_diff",
      "pre14A_intercept",
      "pre14A_slope",
      "pre14B_avgDist",
      "pre14B_diff",
      "pre14B_intercept",
      "pre14B_slope",
      "pre14C_avgDist",
      "pre14C_diff",
      "pre14C_intercept",
      "pre14C_slope",
      "pre14D_avgDist",
      "pre14D_diff",
      "pre14D_intercept",
      "pre14D_slope",
      "pre15A_avgDist",
      "pre15A_diff",
      "pre15A_intercept",
      "pre15A_slope",
      "pre15B_avgDist",
      "pre15B_diff",
      "pre15B_intercept",
      "pre15B_slope",
      "pre15C_avgDist",
      "pre15C_diff",
      "pre15C_intercept",
      "pre15C_slope",
      "pre15D_avgDist",
      "pre15D_diff",
      "pre15D_intercept",
      "pre15D_slope"
    ]
  , data

// console.log(fields)
fs.readFile(file, 'utf8', function (err, data) {
  if (err) console.log(err)

  data = JSON.parse(data)

  // filters any undefined data (it makes R scripting easier)
  data = filterUndefined(data)

  // use 'debug' for your workerId when testing experiments,
  //   comment out if you want to analyze data from yourself
  data = filterDebug(data)

  convert( data )
})

function convert(d) {
  var params = {
    data: d,
    fields: fields
  }
  j2c(params, function(err, csv) {
    if (err) console.log(err)
    console.log(csv)
  })
}

function filterUndefined (arr) {
  return _.filter(arr, function(row) {
    return _.every(fields, function(f) { return row[f] })
  })
}

function filterDebug (arr) {
  return _.filter(arr, function(row) {
    return row.workerId !== 'debug'
  })
}
