MajorLegislations[i] <- (endInd - startInd) - 4
startInd <- grep(pattern = "Major events", y, ignore.case = TRUE)[2]
endInd <- grep(pattern = "Major legislation", y, ignore.case = TRUE)[2]
MajorEvents[i] <- (endInd - startInd) - 4
}
for(i in seq_along(links)){
x <- scan(links[i], what="", sep="\n")
# First bit of cleaning:
x <- gsub("&#160;", "", x, fixed=TRUE) #gsub=global substitution
x <- gsub("</span>", ",", x, fixed=TRUE)
grep("Major legislation*<ui>*<\\ui>", x)
# x <- gsub("<[^<>]*>", "", x)
y <- strsplit(x, ",")
startInd <- grep(pattern = "Major legislation", x, ignore.case = TRUE)[2]
endInd <- grep(pattern = "Constitutional amendments", y, ignore.case = TRUE)[2]
print(i)
print(startInd)
uiInd <- grep(pattern = "<ul>", x[startInd:length(x)])[1:2]
print(uiInd)
MajorLegislations[i] <- (endInd - startInd) - 4
startInd <- grep(pattern = "Major events", y, ignore.case = TRUE)[2]
endInd <- grep(pattern = "Major legislation", y, ignore.case = TRUE)[2]
MajorEvents[i] <- (endInd - startInd) - 4
}
for(i in seq_along(links)){
x <- scan(links[i], what="", sep="\n")
# First bit of cleaning:
x <- gsub("&#160;", "", x, fixed=TRUE) #gsub=global substitution
x <- gsub("</span>", ",", x, fixed=TRUE)
grep("Major legislation*<ui>*<\\ui>", x)
# x <- gsub("<[^<>]*>", "", x)
y <- strsplit(x, ",")
startInd <- grep(pattern = "Major legislation", x, ignore.case = TRUE)[2]
endInd <- grep(pattern = "Constitutional amendments", y, ignore.case = TRUE)[2]
print(congressNums[i])
print(startInd)
uiInd <- grep(pattern = "<ul>", x[startInd:length(x)])[1:2]
print(uiInd)
MajorLegislations[i] <- (endInd - startInd) - 4
startInd <- grep(pattern = "Major events", y, ignore.case = TRUE)[2]
endInd <- grep(pattern = "Major legislation", y, ignore.case = TRUE)[2]
MajorEvents[i] <- (endInd - startInd) - 4
}
for(i in seq_along(links)){
x <- scan(links[i], what="", sep="\n")
# First bit of cleaning:
x <- gsub("&#160;", "", x, fixed=TRUE) #gsub=global substitution
x <- gsub("</span>", ",", x, fixed=TRUE)
grep("Major legislation*<ui>*<\\ui>", x)
# x <- gsub("<[^<>]*>", "", x)
y <- strsplit(x, ",")
startInd <- grep(pattern = "Major legislation", x, ignore.case = TRUE)[2]
endInd <- grep(pattern = "Constitutional amendments", y, ignore.case = TRUE)[2]
print(congresses[i])
print(startInd)
uiInd <- grep(pattern = "<ul>", x[startInd:length(x)])[1:2]
print(uiInd)
MajorLegislations[i] <- (endInd - startInd) - 4
startInd <- grep(pattern = "Major events", y, ignore.case = TRUE)[2]
endInd <- grep(pattern = "Major legislation", y, ignore.case = TRUE)[2]
MajorEvents[i] <- (endInd - startInd) - 4
}
for(i in seq_along(links)){
x <- scan(links[i], what="", sep="\n")
# First bit of cleaning:
x <- gsub("&#160;", "", x, fixed=TRUE) #gsub=global substitution
x <- gsub("</span>", ",", x, fixed=TRUE)
grep("Major legislation*<ui>*<\\ui>", x)
# x <- gsub("<[^<>]*>", "", x)
y <- strsplit(x, ",")
startInd <- grep(pattern = "Major legislation", x, ignore.case = TRUE)[2]
endInd <- grep(pattern = "Constitutional amendments", y, ignore.case = TRUE)[2]
print(congresses[i])
print(startInd)
uiInd <- grep(pattern = "<ul>", x[startInd:length(x)])[1]
print(uiInd)
uiCloseInd <- grep(pattern ="<\\ul>", x[uiInd:length(x)])[1]
MajorLegislations[i] <- (endInd - startInd) - 4
startInd <- grep(pattern = "Major events", y, ignore.case = TRUE)[2]
endInd <- grep(pattern = "Major legislation", y, ignore.case = TRUE)[2]
MajorEvents[i] <- (endInd - startInd) - 4
}
for(i in seq_along(links)){
x <- scan(links[i], what="", sep="\n")
# First bit of cleaning:
x <- gsub("&#160;", "", x, fixed=TRUE) #gsub=global substitution
x <- gsub("</span>", ",", x, fixed=TRUE)
grep("Major legislation*<ui>*<\\ui>", x)
# x <- gsub("<[^<>]*>", "", x)
y <- strsplit(x, ",")
startInd <- grep(pattern = "Major legislation", x, ignore.case = TRUE)[2]
endInd <- grep(pattern = "Constitutional amendments", y, ignore.case = TRUE)[2]
print(congresses[i])
print(startInd)
uiInd <- grep(pattern = "<ul>", x[startInd:length(x)])[1]
print(uiInd)
uiCloseInd <- grep(pattern ="<\\ul>", x[uiInd:length(x)])[1]
print(uiCloseInd)
MajorLegislations[i] <- (endInd - startInd) - 4
startInd <- grep(pattern = "Major events", y, ignore.case = TRUE)[2]
endInd <- grep(pattern = "Major legislation", y, ignore.case = TRUE)[2]
MajorEvents[i] <- (endInd - startInd) - 4
}
x <- scan(links[1], what="", sep="\n")
x <- gsub("&#160;", "", x, fixed=TRUE) #gsub=global substitution
x <- gsub("</span>", ",", x, fixed=TRUE)
startInd <- grep(pattern = "Major legislation", x, ignore.case = TRUE)[2]
endInd <- grep(pattern = "Constitutional amendments", y, ignore.case = TRUE)[2]
print(congresses[i])
print(startInd)
x[279]
x[279:400]
for(i in seq_along(links)){
x <- scan(links[1], what="", sep="\n")
# First bit of cleaning:
x <- gsub("&#160;", "", x, fixed=TRUE) #gsub=global substitution
x <- gsub("</span>", ",", x, fixed=TRUE)
grep("Major legislation*<ui>*<\\ui>", x)
# x <- gsub("<[^<>]*>", "", x)
y <- strsplit(x, ",")
startInd <- grep(pattern = "Major legislation", x, ignore.case = TRUE)[2]
endInd <- grep(pattern = "Constitutional amendments", y, ignore.case = TRUE)[2]
print(congresses[i])
print(startInd)
uiInd <- grep(pattern = "<ul>", x[startInd:length(x)])[1]
print(uiInd)
uiCloseInd <- grep(pattern ="</ul>", x[uiInd:length(x)])[1]
print(uiCloseInd)
MajorLegislations[i] <- (endInd - startInd) - 4
startInd <- grep(pattern = "Major events", y, ignore.case = TRUE)[2]
endInd <- grep(pattern = "Major legislation", y, ignore.case = TRUE)[2]
MajorEvents[i] <- (endInd - startInd) - 4
}
for(i in seq_along(links)){
x <- scan(links[i], what="", sep="\n")
# First bit of cleaning:
x <- gsub("&#160;", "", x, fixed=TRUE) #gsub=global substitution
x <- gsub("</span>", ",", x, fixed=TRUE)
grep("Major legislation*<ui>*<\\ui>", x)
# x <- gsub("<[^<>]*>", "", x)
y <- strsplit(x, ",")
startInd <- grep(pattern = "Major legislation", x, ignore.case = TRUE)[2]
endInd <- grep(pattern = "Constitutional amendments", y, ignore.case = TRUE)[2]
print(congresses[i])
print(startInd)
uiInd <- grep(pattern = "<ul>", x[startInd:length(x)])[1]
print(uiInd)
uiCloseInd <- grep(pattern ="</ul>", x[uiInd:length(x)])[1]
print(uiCloseInd)
MajorLegislations[i] <- (endInd - startInd) - 4
startInd <- grep(pattern = "Major events", y, ignore.case = TRUE)[2]
endInd <- grep(pattern = "Major legislation", y, ignore.case = TRUE)[2]
MajorEvents[i] <- (endInd - startInd) - 4
}
x <- scan(links[1], what="", sep="\n")
x <- gsub("&#160;", "", x, fixed=TRUE) #gsub=global substitution
x <- gsub("</span>", ",", x, fixed=TRUE)
startInd <- grep(pattern = "Major legislation", x, ignore.case = TRUE)[2]
endInd <- grep(pattern = "Constitutional amendments", y, ignore.case = TRUE)[2]
print(congresses[i])
congresses <- sapply(86:115, getOrdinalNumber1)
links <- paste("https://en.wikipedia.org/wiki/",
congresses, "_United_States_Congress", sep = "")
congressNums <- seq(86:115)
MajorLegislations <- rep(0, 30)
MajorEvents <- rep(0, 30)
x <- scan(links[1], what="", sep="\n")
x <- gsub("&#160;", "", x, fixed=TRUE) #gsub=global substitution
x <- gsub("</span>", ",", x, fixed=TRUE)
startInd <- grep(pattern = "Major legislation", x, ignore.case = TRUE)[2]
endInd <- grep(pattern = "Constitutional amendments", y, ignore.case = TRUE)[2]
print(congresses[1])
print(startInd)
uiInd <- grep(pattern = "<ul>", x[startInd:length(x)])[1]
print(uiInd)
x[279:282]
uiCloseInd <- grep(pattern ="</ul>", x[uiInd:length(x)])[1]
print(uiCloseInd)
x[279:290]
check <- x[279 + 11]
check
check <- x[279 + 10]
check
check <- x[289:292]
check
grep("</ul>", check)
uiCloseInd <- grep(pattern ="</ul>", x[uiInd:length(x)])
uiCloseInd
uiCloseInd <- grep(pattern ="</ul>", x[startInd + uiInd:length(x)])
uiCloseInd
uiCloseInd <- grep(pattern ="</ul>", x[startInd + uiInd:length(x)])[1]
uiCloseInd
uiCloseInd - uiInd
uiInd
for(i in seq_along(links)){
x <- scan(links[i], what="", sep="\n")
# First bit of cleaning:
x <- gsub("&#160;", "", x, fixed=TRUE) #gsub=global substitution
x <- gsub("</span>", ",", x, fixed=TRUE)
grep("Major legislation*<ui>*<\\ui>", x)
# x <- gsub("<[^<>]*>", "", x)
y <- strsplit(x, ",")
startInd <- grep(pattern = "Major legislation", x, ignore.case = TRUE)[2]
endInd <- grep(pattern = "Constitutional amendments", y, ignore.case = TRUE)[2]
print(congresses[i])
print(startInd)
uiInd <- grep(pattern = "<ul>", x[startInd:length(x)])[1]
print(uiInd)
uiCloseInd <- grep(pattern ="</ul>", x[startInd + uiInd:length(x)])[1]
print(uiCloseInd)
MajorLegislations[i] <- uiCloseInd - 1
startInd <- grep(pattern = "Major events", y, ignore.case = TRUE)[2]
endInd <- grep(pattern = "Major legislation", y, ignore.case = TRUE)[2]
MajorEvents[i] <- (endInd - startInd) - 4
}
MajorLegislations
for(i in seq_along(links)){
x <- scan(links[i], what="", sep="\n")
# First bit of cleaning:
x <- gsub("&#160;", "", x, fixed=TRUE) #gsub=global substitution
x <- gsub("</span>", ",", x, fixed=TRUE)
grep("Major legislation*<ui>*<\\ui>", x)
# x <- gsub("<[^<>]*>", "", x)
y <- strsplit(x, ",")
startInd <- grep(pattern = "Major legislation", x, ignore.case = TRUE)[2]
uiInd <- grep(pattern = "<ul>", x[startInd:length(x)])[1]
uiCloseInd <- grep(pattern ="</ul>", x[startInd + uiInd:length(x)])[1]
if(i == 25)
uiCloseInd <- grep(pattern ="</ul>", x[startInd + uiInd:length(x)])[2]
MajorLegislations[i] <- uiCloseInd - 1
startInd <- grep(pattern = "Major events", x, ignore.case = TRUE)[2]
}
MajorLegislations
links[25]
x <- scan(links[25], what="", sep="\n")
x <- gsub("&#160;", "", x, fixed=TRUE) #gsub=global substitution
x <- gsub("</span>", ",", x, fixed=TRUE)
startInd <- grep(pattern = "Major legislation", x, ignore.case = TRUE)[2]
uiInd <- grep(pattern = "<ul>", x[startInd:length(x)])[1]
uiCloseInd <- grep(pattern ="</ul>", x[startInd + uiInd:length(x)])[1]
uiInd
uiCloseInd
uiCloseInd <- grep(pattern ="</ul>", x[startInd + uiInd:length(x)])[2]
uiCloseInd
x
startInd
x[startInd:startInd+uiCloseInd]
x[startInd]
x[startInd:startInd+30]
x[startInd:(startInd+30)]
MajorLegislations[25]
MajorLegislations
MajorLegislations <- data.frame(Congress = 86:115,
Frequency = MajorLegislations)
View(MajorLegislations)
?save
save(MajorLegislations, file = "Desktop/Research/VotingResearch/Data/MajorLegislations.RData")
knitr::opts_chunk$set(echo = TRUE)
library(magrittr)
library(ggplot2)
library(dplyr)
forestry <- read.csv("datasets/forestry.csv")
forestry <- read.csv("datasets/forestry.csv")
forestry <- read.csv("datasets/forestry.csv")
setwd("~/Desktop/USFFall2017/MATH372")
forestry <- read.csv("datasets/forestry.csv")
full_fit <- lm(area~height+caliper+htcal, data = forestry)
sigma_hat <- summary(full_fit)$sigma # sigma-hat
X <- cbind(rep(1, nrow(forestry)), forestry[,-which(names(forestry) == "area")]) %>% as.matrix()# X matrix
H <- X %*% solve(t(X) %*% X) %*% t(X) # Hat matrix
h <- diag(H) # diagonal elements of H
st_resid <- full_fit$residuals/(sigma_hat*sqrt(1-h)) # 'Studentized' Residuals
par(mfrow = c(2,2))
## Plot of residuals vs. index
n <- length(full_fit$residuals)
index <- 1:n
plot(x = index, y = st_resid, col = "purple", pch = 16, xlab = "Index", ylab = "Model Studentsized Residuals", main = "Studentized Residuals vs. Index")
abline(h = 0, col = "red", lwd = 2)
## Plot of Residuals vs. Fitted Values
plot(x = full_fit$fitted.values, y = st_resid, col = "darkblue", pch = 16, xlab = "Fitted Values", ylab = "Model Studentized Residuals", main = "Studentized Residuals vs. Fitted Values")
abline(h = 0, col = "red", lwd = 2)
## Histogram of residuals
hist(st_resid, xlab = "Model Studentized Residuals", main = "Histogram of Studentized Residuals")
## QQ-plot of residuals
qqnorm(st_resid, pch = 16, main = "QQ-plot of Studentized Residuals")
qqline(st_resid, col = "red", lwd = 2)
# Taking absolute value of studentized residual vector and
# extracting the index where the highest value is. Then
# printing that row of the dataframe forestry
print(forestry[which.max(abs(st_resid)),])
print(max(st_resid))
# Taking absolute value of studentized residual vector and
# extracting the index where the highest value is. Then
# printing that row of the dataframe forestry
print(forestry[which.max(abs(st_resid)),])
print(max(st_resid))
print(paste("Max residual:" , max(st_resid)))
print(paste("Max residual:" , round(max(st_resid), 4)))
# Taking absolute value of studentized residual vector and
# extracting the index where the highest value is. Then
# printing that row of the dataframe forestry
print(forestry[which.max(abs(st_resid)),])
print(paste("Max residual:" , round(max(st_resid), 4)))
summary(st_resid)
studres(full_fit)
?studres
library(MASS)
?studres
library(MASS)
studres(full_fit) %>% summary()
full_fit <- lm(area~height+caliper+htcal, data = forestry)
st_resid <- studres(full_fit)
par(mfrow = c(2,2))
## Plot of residuals vs. index
n <- length(full_fit$residuals)
index <- 1:n
plot(x = index, y = st_resid, col = "purple", pch = 16, xlab = "Index", ylab = "Model Studentsized Residuals", main = "Studentized Residuals vs. Index")
abline(h = 0, col = "red", lwd = 2)
## Plot of Residuals vs. Fitted Values
plot(x = full_fit$fitted.values, y = st_resid, col = "darkblue", pch = 16, xlab = "Fitted Values", ylab = "Model Studentized Residuals", main = "Studentized Residuals vs. Fitted Values")
abline(h = 0, col = "red", lwd = 2)
## Histogram of residuals
hist(st_resid, xlab = "Model Studentized Residuals", main = "Histogram of Studentized Residuals")
## QQ-plot of residuals
qqnorm(st_resid, pch = 16, main = "QQ-plot of Studentized Residuals")
qqline(st_resid, col = "red", lwd = 2)
# Taking absolute value of studentized residual vector and
# extracting the index where the highest value is. Then
# printing that row of the dataframe forestry
print(forestry[which.max(abs(st_resid)),])
print(paste("Max residual:" , round(max(st_resid), 4)))
hatvalues(m) # These are the leverages (i.e., diagonal values of the hat matrix)
cooks.distance(m) # These are the influence measures (Cook's D-Statistic)
hatvalues(full_fit) # These are the leverages (i.e., diagonal values of the hat matrix)
cooks.distance(full_fit) # These are the influence measures (Cook's D-Statistic)
hat <- hatvalues(full_fit)
cooks <- cooks.distance(full_fit)
par(mfrow = c(1,2))
plot(hat, main = "Leverage", ylab = "Hat Values", ylim = c(0,1))
abline(h = 2*mean(hat), col = "red", lty = 2)
plot(cooks, main = "Influence", ylab = "Cook's D", ylim = c(0,1))
abline(h = 0.5, col = "red", lty = 2)
dev.off()
hat <- hatvalues(full_fit)
plot(hat, main = "Leverage", ylab = "Hat Values", ylim = c(0,1))
abline(h = 2*mean(hat), col = "red", lty = 2)
cooks <- cooks.distance(full_fit)
plot(cooks, main = "Influence", ylab = "Cook's D", ylim = c(0,1))
abline(h = 0.5, col = "red", lty = 2)
reduced_fit <- lm(area~height+caliper+htcal, data = forestry[-c(10, 29),])
st_resid <- studres(reduced_fit)
par(mfrow = c(2,2))
## Plot of residuals vs. index
n <- length(reduced_fit$residuals)
index <- 1:n
plot(x = index, y = st_resid, col = "purple", pch = 16, xlab = "Index", ylab = "Model Studentsized Residuals", main = "Studentized Residuals vs. Index")
abline(h = 0, col = "red", lwd = 2)
## Plot of Residuals vs. Fitted Values
plot(x = reduced_fit$fitted.values, y = st_resid, col = "darkblue", pch = 16, xlab = "Fitted Values", ylab = "Model Studentized Residuals", main = "Studentized Residuals vs. Fitted Values")
abline(h = 0, col = "red", lwd = 2)
## Histogram of residuals
hist(st_resid, xlab = "Model Studentized Residuals", main = "Histogram of Studentized Residuals")
## QQ-plot of residuals
qqnorm(st_resid, pch = 16, main = "QQ-plot of Studentized Residuals")
qqline(st_resid, col = "red", lwd = 2)
print(length(st_resid))
nrow(forestry)
full_fit <- lm(area~height+caliper+htcal, data = forestry)
st_resid <- studres(full_fit)
par(mfrow = c(2,2))
## Plot of residuals vs. index
n <- length(full_fit$residuals)
index <- 1:n
plot(x = index, y = st_resid, col = "purple", pch = 16, xlab = "Index", ylab = "Model Studentsized Residuals", main = "Studentized Residuals vs. Index")
abline(h = 0, col = "red", lwd = 2)
## Plot of Residuals vs. Fitted Values
plot(x = full_fit$fitted.values, y = st_resid, col = "darkblue", pch = 16, xlab = "Fitted Values", ylab = "Model Studentized Residuals", main = "Studentized Residuals vs. Fitted Values")
abline(h = 0, col = "red", lwd = 2)
## Histogram of residuals
hist(st_resid, xlab = "Model Studentized Residuals", main = "Histogram of Studentized Residuals")
## QQ-plot of residuals
qqnorm(st_resid, pch = 16, main = "QQ-plot of Studentized Residuals")
qqline(st_resid, col = "red", lwd = 2)
log_fit <- lm(log(area)~height+caliper+htcal, data = forestry[-c(10, 29),])
log_fit <- lm(log(area)~height+caliper+htcal, data = forestry[-c(10, 29),])
st_resid <- studres(log_fit)
plot(x = log_fit$fitted.values, y = st_resid, col = "darkblue", pch = 16, xlab = "Fitted Values", ylab = "Model Studentized Residuals", main = "Studentized Residuals vs. Fitted Values")
abline(h = 0, col = "red", lwd = 2)
dev.off()
log_fit <- lm(log(area)~height+caliper+htcal, data = forestry[-c(10, 29),])
st_resid <- studres(log_fit)
plot(x = log_fit$fitted.values, y = st_resid, col = "darkblue", pch = 16, xlab = "Fitted Values", ylab = "Model Studentized Residuals", main = "Studentized Residuals vs. Fitted Values")
abline(h = 0, col = "red", lwd = 2)
dev.off()
st_resid <- studres(log_fit)
plot(x = log_fit$fitted.values, y = st_resid, col = "darkblue", pch = 16, xlab = "Fitted Values", ylab = "Model Studentized Residuals", main = "Studentized Residuals vs. Fitted Values")
abline(h = 0, col = "red", lwd = 2)
setwd("~/Desktop/USFFall2017/MATH372")
setwd("~/Desktop/Research/VGLResearch/DefaultAesthetics/Data/GeneratedPlotData/BunchOfScatterplots")
data <- read.csv("small/1.csv")
plot(data$x, data$y, col = data$class)
print(i)
for(i in [1:30]){
print(i)
}
for(i in [1:30]){
print(i)
}
for(i in 1:30){
print(i)
}
cat(i)
for(i in 1:30){
cat(i)
}
for(i in 1:30){
cat(i, sep="\n")
}
for(i in 1:30){
cat(i)
cat("\n")
}
for(i in 1:30){
for j in c("A", "B", "C", "D"){
cat("pre", i, j )
cat("\n")
}
}
for(i in 1:30){
for( j in c("A", "B", "C", "D")){
cat("pre", i, j)
cat("\n")
}
}
for(i in 1:30){
for( j in c("A", "B", "C", "D")){
cat("pre", i, j, sep ="")
cat("\n")
}
}
for(i in 1:30){
for( j in c("A", "B", "C", "D")){
for(h in c("_avgDist", "_diff", "_intercept", "_slope")){
cat("pre", i, j, sep ="")
cat("\n")
}
}
}
for(i in 1:30){
for( j in c("A", "B", "C", "D")){
for(h in c("_avgDist", "_diff", "_intercept", "_slope")){
cat("pre", i, j, h, sep ="")
cat("\n")
}
}
}
for(i in 1:30){
for( j in c("A", "B", "C", "D")){
for(h in c("_avgDist", "_diff", "_intercept", "_slope""")){
cat("""pre", i, j, h, sep ="")
cat("\n")
}
}
}
for(i in 1:30){
for( j in c("A", "B", "C", "D")){
for(h in c("_avgDist", "_diff", "_intercept", '_slope"')){
cat('"pre', i, j, h, sep ="")
cat("\n")
}
}
}
for(i in 1:30){
for( j in c("A", "B", "C", "D")){
for(h in c('_avgDist"', '_diff"', '_intercept"', '_slope"')){
cat('"pre', i, j, h, sep ="")
cat("\n")
}
}
}
setwd("~/Desktop/Research/VGLResearch/DefaultAesthetics/NewStudy/NewStudy/analysis/results")
data <- read.csv("data.csv")
View(data)
for(i in 1:30){
for( j in c("A", "B", "C", "D")){
for(h in c('_avgDist,"', '_diff,"', '_intercept,"', '_slope,"')){
cat('"pre', i, j, h, sep ="")
cat("\n")
}
}
}
for(i in 1:30){
for( j in c("A", "B", "C", "D")){
for(h in c('_avgDist",', '_diff",', '_intercept",', '_slope",')){
cat('"pre', i, j, h, sep ="")
cat("\n")
}
}
}
data <- read.csv("data.csv")
postId
for(i in 1:30){
for( j in c("A", "B", "C", "D")){
for(h in c('_avgDist",', '_diff",', '_intercept",', '_slope",')){
cat('"pre', i, j, h, sep ="")
cat("\n")
}
}
}
View(data)
data <- read.csv("data.csv")
data <- read.csv("data.csv")
